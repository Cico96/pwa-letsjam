/**
 * LetsJamApi
 * RESTful Api for LetsJam Website. MWT 2020/2021 - Jacopo Cicoria, Antonio Angelini, Mattia Lenza
 *
 * OpenAPI spec version: 1.0
 * Contact: mattia.lenza@student.univaq.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../services/configuration-api/encoder';

import {Observable} from 'rxjs';

import {Comment} from '../model/comment';
import {CommentCommentIdBody} from '../model/requests-model/commentCommentIdBody';
import {MusicsheetIdCommentBody} from '../model/requests-model/musicsheetIdCommentBody';

import { BASE_PATH, COLLECTION_FORMATS } from '../services/configuration-api/variables';
import { Configuration } from '../services/configuration-api/configuration';


@Injectable({
  providedIn: 'root'
})
export class CommentService {

  protected basePath = 'https://letsjam.ccml.it/rest';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Adds a new comment to specified musicSheet
   *
   * @param musicsheetId
   * @param body
   * @param parent Id of the parent comment. Required if the new comment is a reply to another comment
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addComment(musicsheetId: number, body?: MusicsheetIdCommentBody, parent?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;
  public addComment(musicsheetId: number, body?: MusicsheetIdCommentBody, parent?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;
  public addComment(musicsheetId: number, body?: MusicsheetIdCommentBody, parent?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;
  public addComment(musicsheetId: number, body?: MusicsheetIdCommentBody, parent?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (musicsheetId === null || musicsheetId === undefined) {
      throw new Error('Required parameter musicsheetId was null or undefined when calling addComment.');
    }


    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (parent !== undefined && parent !== null) {
      queryParameters = queryParameters.set('parent', <any>parent);
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Array<Comment>>('post', `${this.basePath}/musicsheet/${encodeURIComponent(String(musicsheetId))}/comment`,
      {
        body: body,
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets a comment by id
   *
   * @param commentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommentById(commentId: number, observe?: 'body', reportProgress?: boolean): Observable<Comment>;
  public getCommentById(commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;
  public getCommentById(commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;
  public getCommentById(commentId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (commentId === null || commentId === undefined) {
      throw new Error('Required parameter commentId was null or undefined when calling getCommentById.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Comment>('get', `${this.basePath}/comment/${encodeURIComponent(String(commentId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets all the comments for the specified musicsheet
   *
   * @param musicsheetId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMusicSheetComments(musicsheetId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;
  public getMusicSheetComments(musicsheetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;
  public getMusicSheetComments(musicsheetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;
  public getMusicSheetComments(musicsheetId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (musicsheetId === null || musicsheetId === undefined) {
      throw new Error('Required parameter musicsheetId was null or undefined when calling getMusicSheetComments.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<Comment>>('get', `${this.basePath}/musicsheet/${encodeURIComponent(String(musicsheetId))}/comments`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets all the replies to the specified comment
   *
   * @param commentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getReplies(commentId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;
  public getReplies(commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;
  public getReplies(commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;
  public getReplies(commentId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (commentId === null || commentId === undefined) {
      throw new Error('Required parameter commentId was null or undefined when calling getReplies.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<Comment>>('get', `${this.basePath}/comment/${encodeURIComponent(String(commentId))}/replies`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Updates comment content
   *
   * @param commentId
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateComment(commentId: number, body?: CommentCommentIdBody, observe?: 'body', reportProgress?: boolean): Observable<Comment>;
  public updateComment(commentId: number, body?: CommentCommentIdBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;
  public updateComment(commentId: number, body?: CommentCommentIdBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;
  public updateComment(commentId: number, body?: CommentCommentIdBody, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (commentId === null || commentId === undefined) {
      throw new Error('Required parameter commentId was null or undefined when calling updateComment.');
    }


    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Comment>('patch', `${this.basePath}/comment/${encodeURIComponent(String(commentId))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
