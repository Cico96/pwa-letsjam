/**
 * LetsJamApi
 * RESTful Api for LetsJam Website. MWT 2020/2021 - Jacopo Cicoria, Antonio Angelini, Mattia Lenza
 *
 * OpenAPI spec version: 1.0
 * Contact: mattia.lenza@student.univaq.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../services/configuration-api/encoder';

import {Observable} from 'rxjs';

import {Song} from '../model/song';

import { BASE_PATH, COLLECTION_FORMATS } from '../services/configuration-api/variables';
import { Configuration } from '../services/configuration-api/configuration';


@Injectable({
  providedIn: 'root'
})
export class SongService {

  protected basePath = 'https://letsjam.ccml.it/rest';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Gets a song by id
   *
   * @param songId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSongById(songId: number, observe?: 'body', reportProgress?: boolean): Observable<Song>;
  public getSongById(songId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Song>>;
  public getSongById(songId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Song>>;
  public getSongById(songId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (songId === null || songId === undefined) {
      throw new Error('Required parameter songId was null or undefined when calling getSongById.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Song>('get', `${this.basePath}/song/${encodeURIComponent(String(songId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Gets all songs
   *
   * @param search
   * @param sortby Name of the column for sorting musicsheets
   * @param sortdirection Direction of sorting. ASC or DESC
   * @param genres List of genres to search song for
   * @param explicit Wheater to show songs with explicit content or not
   * @param hasLyrics Wheater to show only songs with lyrics or not
   * @param albumtype Wheater to show only songs with the specified albumType
   * @param pagenumber The number of the page to skip before collect songs
   * @param pagesize The number elements to return
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSongs(search?: string, sortby?: string, sortdirection?: string, genres?: Array<string>, explicit?: boolean, hasLyrics?: boolean, albumtype?: string, pagenumber?: number, pagesize?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Song>>;
  public getSongs(search?: string, sortby?: string, sortdirection?: string, genres?: Array<string>, explicit?: boolean, hasLyrics?: boolean, albumtype?: string, pagenumber?: number, pagesize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Song>>>;
  public getSongs(search?: string, sortby?: string, sortdirection?: string, genres?: Array<string>, explicit?: boolean, hasLyrics?: boolean, albumtype?: string, pagenumber?: number, pagesize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Song>>>;
  public getSongs(search?: string, sortby?: string, sortdirection?: string, genres?: Array<string>, explicit?: boolean, hasLyrics?: boolean, albumtype?: string, pagenumber?: number, pagesize?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (search !== undefined && search !== null) {
      queryParameters = queryParameters.set('search', <any>search);
    }
    if (sortby !== undefined && sortby !== null) {
      queryParameters = queryParameters.set('sortby', <any>sortby);
    }
    if (sortdirection !== undefined && sortdirection !== null) {
      queryParameters = queryParameters.set('sortdirection', <any>sortdirection);
    }
    if (genres) {
      genres.forEach((element) => {
        queryParameters = queryParameters.append('genres', <any>element);
      })
    }
    if (explicit !== undefined && explicit !== null) {
      queryParameters = queryParameters.set('explicit', <any>explicit);
    }
    if (hasLyrics !== undefined && hasLyrics !== null) {
      queryParameters = queryParameters.set('hasLyrics', <any>hasLyrics);
    }
    if (albumtype !== undefined && albumtype !== null) {
      queryParameters = queryParameters.set('albumtype', <any>albumtype);
    }
    if (pagenumber !== undefined && pagenumber !== null) {
      queryParameters = queryParameters.set('pagenumber', <any>pagenumber);
    }
    if (pagesize !== undefined && pagesize !== null) {
      queryParameters = queryParameters.set('pagesize', <any>pagesize);
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<Song>>('get', `${this.basePath}/songs`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
